//
//  File.swift
//  Alchemy
//
//  Created by Vincent Herrin on 9/30/15.
//  Copyright Â© 2015 MIL. All rights reserved.
//

import Foundation
import WatsonCore

/**
sample structure with values

<results>
    <status>OK</status>
    <usage>By accessing AlchemyAPI or using information generated by AlchemyAPI, you are agreeing to be bound by the AlchemyAPI Terms of Use: http://www.alchemyapi.com/company/terms.html</usage>
    <url>http://static01.nyt.com/images/2013/07/13/us/13cong_600/13cong_600-thumbLarge.jpg</url>
    <totalTransactions>6</totalTransactions>
    <imageKeywords>
        <keyword>
            <text>person</text>
            <score>0.999447</score>
            <knowledgeGraph>
                <typeHierarchy>/people</typeHierarchy>
            </knowledgeGraph>
        </keyword>
    </imageKeywords>
</results>


*/


/**
This enum is used as the keys for the key value pairs items
*/
public enum RankedImageKeyword: String {
    case TotalTransactions = "totalTransactions"
    case ImageKeywords = "imageKeywords"
    case Score = "score"
    case TypeHierarchy = "typeHierarchy"
    case Keyword = "keyword"
    case KnowledgeGraph = "knowledgeGraph"
    case Text = "text"
}


public class RankedImageKeywordsModel: WatsonCore.BaseModel {
    
    internal var totalTransactions: Int = -1
    internal var imageKeyWords: [ImageKeyWordsModel] = []
    
    init(totalTransactions: Int = 0, imageKeyWords: [ImageKeyWordsModel] = [], resultStatus: ResultStatusModel, rawData: NSData) {
        
        self.totalTransactions = totalTransactions
        self.imageKeyWords = imageKeyWords
        super.init(rawData: rawData, modelError: "")
    }
    
    init(){super.init(NSData())}
    
    public static func getRankedImageKeywordsModel(rawData: AnyObject)->RankedImageKeywordsModel {
        
        let rankedImageKeywords = RankedImageKeywordsModel()
        rankedImageKeywords.rawData = rawData
        var tempImageKeyWords : [ImageKeyWordsModel] = []
        do {
            // this type is for json
            if(rawData is NSDictionary) {
                
                for (key, value) in (rawData as! NSDictionary) {
                    
                    switch key as! String  {
                    case RankedImageKeyword.TotalTransactions.rawValue:
                        rankedImageKeywords.totalTransactions = Int(value as! String)!
                    case RankedImageKeyword.ImageKeywords.rawValue:
                        for imageKeyWords in (value as! NSArray) {
                            let imageKeyWord = ImageKeyWordsModel(rawData: rawData)
                            for (keywordKey,keywordValue) in (imageKeyWords as! NSDictionary) {
                                switch keywordKey as! String {
                                case RankedImageKeyword.Score.rawValue:
                                    imageKeyWord.score = Double(keywordValue as! String)!
                                case RankedImageKeyword.Text.rawValue:
                                    imageKeyWord.text = keywordValue as! String
                                default: break
                                }
                            }
                        tempImageKeyWords.append(imageKeyWord)
                        }
                    default: break
                    }
                }
                rankedImageKeywords.imageKeyWords = tempImageKeyWords
            }
            // this type is for xml
            else if (rawData is NSData) {
                let xmlDoc = try AEXMLDocument(xmlData: rawData as! NSData)
                
                #if DEBUG
                    // prints the same XML structure as original
                    print(xmlDoc.xmlString)
                    for child in xmlDoc.root.children {
                        print(child.name)
                    }
                #endif
                
                if let imageKeywords = xmlDoc.root[RankedImageKeyword.ImageKeywords.rawValue][RankedImageKeyword.Keyword.rawValue].all {
                    for keyword in imageKeywords {
                        
                        let imageKeyword = ImageKeyWordsModel(text: keyword[RankedImageKeyword.Text.rawValue].stringValue, score: keyword[RankedImageKeyword.Score.rawValue].doubleValue, rawData: rawData)
                        tempImageKeyWords.append(imageKeyword)
                    }
                }
                rankedImageKeywords.totalTransactions = xmlDoc.root[RankedImageKeyword.TotalTransactions.rawValue].intValue
                rankedImageKeywords.rawData = rawData
                rankedImageKeywords.imageKeyWords = tempImageKeyWords
            }
            return rankedImageKeywords
        }
        catch{
            print("\(error)")
            rankedImageKeywords.modelError = "Failed to create RankedImageKeywordsModel - " + AlchemyConstants.Status.ERROR.rawValue
        }
        
        return rankedImageKeywords
    }
    
}